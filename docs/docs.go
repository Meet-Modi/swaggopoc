// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Check if the API is running",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/user-action": {
            "get": {
                "description": "Handle various user operations based on HTTP method and action query parameter",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "user-actions"
                ],
                "summary": "Handle user actions based on HTTP method and action parameter",
                "parameters": [
                    {
                        "enum": [
                            "list",
                            "get",
                            "search",
                            "create",
                            "update",
                            "delete"
                        ],
                        "type": "string",
                        "description": "Action to perform",
                        "name": "action",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (required for get, update, delete actions)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "User object (required for create and update actions)",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserListResponse"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Handle various user operations based on HTTP method and action query parameter",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "user-actions"
                ],
                "summary": "Handle user actions based on HTTP method and action parameter",
                "parameters": [
                    {
                        "enum": [
                            "list",
                            "get",
                            "search",
                            "create",
                            "update",
                            "delete"
                        ],
                        "type": "string",
                        "description": "Action to perform",
                        "name": "action",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (required for get, update, delete actions)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "User object (required for create and update actions)",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserListResponse"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Handle various user operations based on HTTP method and action query parameter",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "user-actions"
                ],
                "summary": "Handle user actions based on HTTP method and action parameter",
                "parameters": [
                    {
                        "enum": [
                            "list",
                            "get",
                            "search",
                            "create",
                            "update",
                            "delete"
                        ],
                        "type": "string",
                        "description": "Action to perform",
                        "name": "action",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (required for get, update, delete actions)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "User object (required for create and update actions)",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserListResponse"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Handle various user operations based on HTTP method and action query parameter",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "user-actions"
                ],
                "summary": "Handle user actions based on HTTP method and action parameter",
                "parameters": [
                    {
                        "enum": [
                            "list",
                            "get",
                            "search",
                            "create",
                            "update",
                            "delete"
                        ],
                        "type": "string",
                        "description": "Action to perform",
                        "name": "action",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID (required for get, update, delete actions)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "User object (required for create and update actions)",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserListResponse"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get a list of all users",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserListResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the provided information including nested address, contact, profile, and preferences",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User information with nested structures",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a single user by their ID",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user with the provided information. All nested structures can be partially updated",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user information with nested structures",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by their ID",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/address": {
            "get": {
                "description": "Get the address information for a specific user",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the address information for a specific user",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address information",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/preferences": {
            "get": {
                "description": "Get the preferences for a specific user",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's preferences",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Preferences"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the preferences for a specific user",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's preferences",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User preferences",
                        "name": "preferences",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Preferences"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Preferences"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/profile": {
            "get": {
                "description": "Get the profile information for a specific user",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the profile information for a specific user",
                "consumes": [
                    "application/json",
                    "text/xml"
                ],
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User profile",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Address": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "postal_code": {
                    "type": "string",
                    "example": "10001"
                },
                "state": {
                    "type": "string",
                    "example": "NY"
                },
                "street": {
                    "type": "string",
                    "example": "123 Main St"
                }
            }
        },
        "ContactInfo": {
            "type": "object",
            "properties": {
                "alternate_email": {
                    "type": "string",
                    "example": "john.doe.alt@example.com"
                },
                "phone": {
                    "type": "string",
                    "example": "+1-555-123-4567"
                },
                "website": {
                    "type": "string",
                    "example": "https://johndoe.com"
                }
            }
        },
        "CreateUserRequest": {
            "type": "object",
            "required": [
                "address",
                "email",
                "name"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "contact": {
                    "$ref": "#/definitions/ContactInfo"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "preferences": {
                    "$ref": "#/definitions/Preferences"
                },
                "profile": {
                    "$ref": "#/definitions/Profile"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Something went wrong"
                }
            }
        },
        "NotificationSettings": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "boolean",
                    "example": true
                },
                "marketing": {
                    "type": "boolean",
                    "example": false
                },
                "push": {
                    "type": "boolean",
                    "example": true
                },
                "sms": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Preferences": {
            "type": "object",
            "properties": {
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "notifications": {
                    "$ref": "#/definitions/NotificationSettings"
                },
                "privacy": {
                    "$ref": "#/definitions/PrivacySettings"
                },
                "theme": {
                    "type": "string",
                    "example": "dark"
                }
            }
        },
        "PrivacySettings": {
            "type": "object",
            "properties": {
                "profile_visible": {
                    "type": "boolean",
                    "example": true
                },
                "show_email": {
                    "type": "boolean",
                    "example": false
                },
                "show_phone": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "Profile": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "bio": {
                    "type": "string",
                    "example": "Software engineer with 5 years of experience"
                },
                "experience": {
                    "type": "integer",
                    "example": 5
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Go",
                        "JavaScript",
                        "Python"
                    ]
                }
            }
        },
        "SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "UpdateUserRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "contact": {
                    "$ref": "#/definitions/ContactInfo"
                },
                "email": {
                    "type": "string",
                    "example": "jane@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "Jane Doe"
                },
                "preferences": {
                    "$ref": "#/definitions/Preferences"
                },
                "profile": {
                    "$ref": "#/definitions/Profile"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "contact": {
                    "$ref": "#/definitions/ContactInfo"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "preferences": {
                    "$ref": "#/definitions/Preferences"
                },
                "profile": {
                    "$ref": "#/definitions/Profile"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "UserListResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Swaggo POC API with Nested Structures",
	Description:      "This is a sample API server using Swaggo for Swagger documentation generation with nested JSON structures for user management.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
