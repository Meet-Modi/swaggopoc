basePath: /api/v1
definitions:
  Address:
    properties:
      city:
        example: New York
        type: string
      country:
        example: USA
        type: string
      postal_code:
        example: "10001"
        type: string
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
    type: object
  ContactInfo:
    properties:
      alternate_email:
        example: john.doe.alt@example.com
        type: string
      phone:
        example: +1-555-123-4567
        type: string
      website:
        example: https://johndoe.com
        type: string
    type: object
  CreateUserRequest:
    properties:
      address:
        $ref: '#/definitions/Address'
      contact:
        $ref: '#/definitions/ContactInfo'
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      preferences:
        $ref: '#/definitions/Preferences'
      profile:
        $ref: '#/definitions/Profile'
    required:
    - address
    - email
    - name
    type: object
  ErrorResponse:
    properties:
      error:
        example: Something went wrong
        type: string
    type: object
  NotificationSettings:
    properties:
      email:
        example: true
        type: boolean
      marketing:
        example: false
        type: boolean
      push:
        example: true
        type: boolean
      sms:
        example: false
        type: boolean
    type: object
  Preferences:
    properties:
      language:
        example: en
        type: string
      notifications:
        $ref: '#/definitions/NotificationSettings'
      privacy:
        $ref: '#/definitions/PrivacySettings'
      theme:
        example: dark
        type: string
    type: object
  PrivacySettings:
    properties:
      profile_visible:
        example: true
        type: boolean
      show_email:
        example: false
        type: boolean
      show_phone:
        example: false
        type: boolean
    type: object
  Profile:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Software engineer with 5 years of experience
        type: string
      experience:
        example: 5
        type: integer
      skills:
        example:
        - Go
        - JavaScript
        - Python
        items:
          type: string
        type: array
    type: object
  SuccessResponse:
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  UpdateUserRequest:
    properties:
      address:
        $ref: '#/definitions/Address'
      contact:
        $ref: '#/definitions/ContactInfo'
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        type: string
      preferences:
        $ref: '#/definitions/Preferences'
      profile:
        $ref: '#/definitions/Profile'
    type: object
  User:
    properties:
      address:
        $ref: '#/definitions/Address'
      contact:
        $ref: '#/definitions/ContactInfo'
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      preferences:
        $ref: '#/definitions/Preferences'
      profile:
        $ref: '#/definitions/Profile'
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  UserListResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/User'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample API server using Swaggo for Swagger documentation
    generation with nested JSON structures for user management.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swaggo POC API with Nested Structures
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      - text/xml
      description: Check if the API is running
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
      summary: Health check
      tags:
      - health
  /user-action:
    delete:
      consumes:
      - application/json
      - text/xml
      description: Handle various user operations based on HTTP method and action
        query parameter
      parameters:
      - description: Action to perform
        enum:
        - list
        - get
        - search
        - create
        - update
        - delete
        in: query
        name: action
        required: true
        type: string
      - description: User ID (required for get, update, delete actions)
        in: query
        name: id
        type: integer
      - description: User object (required for create and update actions)
        in: body
        name: user
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserListResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Handle user actions based on HTTP method and action parameter
      tags:
      - user-actions
    get:
      consumes:
      - application/json
      - text/xml
      description: Handle various user operations based on HTTP method and action
        query parameter
      parameters:
      - description: Action to perform
        enum:
        - list
        - get
        - search
        - create
        - update
        - delete
        in: query
        name: action
        required: true
        type: string
      - description: User ID (required for get, update, delete actions)
        in: query
        name: id
        type: integer
      - description: User object (required for create and update actions)
        in: body
        name: user
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserListResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Handle user actions based on HTTP method and action parameter
      tags:
      - user-actions
    post:
      consumes:
      - application/json
      - text/xml
      description: Handle various user operations based on HTTP method and action
        query parameter
      parameters:
      - description: Action to perform
        enum:
        - list
        - get
        - search
        - create
        - update
        - delete
        in: query
        name: action
        required: true
        type: string
      - description: User ID (required for get, update, delete actions)
        in: query
        name: id
        type: integer
      - description: User object (required for create and update actions)
        in: body
        name: user
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserListResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Handle user actions based on HTTP method and action parameter
      tags:
      - user-actions
    put:
      consumes:
      - application/json
      - text/xml
      description: Handle various user operations based on HTTP method and action
        query parameter
      parameters:
      - description: Action to perform
        enum:
        - list
        - get
        - search
        - create
        - update
        - delete
        in: query
        name: action
        required: true
        type: string
      - description: User ID (required for get, update, delete actions)
        in: query
        name: id
        type: integer
      - description: User object (required for create and update actions)
        in: body
        name: user
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserListResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Handle user actions based on HTTP method and action parameter
      tags:
      - user-actions
  /users:
    get:
      consumes:
      - application/json
      - text/xml
      description: Get a list of all users
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserListResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      - text/xml
      description: Create a new user with the provided information including nested
        address, contact, profile, and preferences
      parameters:
      - description: User information with nested structures
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/CreateUserRequest'
      produces:
      - application/json
      - text/xml
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      - text/xml
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      - text/xml
      description: Get a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      - text/xml
      description: Update an existing user with the provided information. All nested
        structures can be partially updated
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information with nested structures
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UpdateUserRequest'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a user
      tags:
      - users
  /users/{id}/address:
    get:
      consumes:
      - application/json
      - text/xml
      description: Get the address information for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Address'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get user's address
      tags:
      - users
    put:
      consumes:
      - application/json
      - text/xml
      description: Update the address information for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address information
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/Address'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Address'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user's address
      tags:
      - users
  /users/{id}/preferences:
    get:
      consumes:
      - application/json
      - text/xml
      description: Get the preferences for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Preferences'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get user's preferences
      tags:
      - users
    put:
      consumes:
      - application/json
      - text/xml
      description: Update the preferences for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User preferences
        in: body
        name: preferences
        required: true
        schema:
          $ref: '#/definitions/Preferences'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Preferences'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user's preferences
      tags:
      - users
  /users/{id}/profile:
    get:
      consumes:
      - application/json
      - text/xml
      description: Get the profile information for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get user's profile
      tags:
      - users
    put:
      consumes:
      - application/json
      - text/xml
      description: Update the profile information for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/Profile'
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user's profile
      tags:
      - users
schemes:
- http
swagger: "2.0"
